import { useUser } from "@auth0/nextjs-auth0";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React from "react";
import Loading from "../components/Loading";
import WarningMessage from "../components/WarningMessage";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen max-w-md flex-col items-center justify-center p-4">
        <div className="block font-sans text-xl font-semibold leading-snug tracking-normal text-inherit antialiased">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>

        <div className="w-full pt-8">
          <SecretTrpc />
        </div>

        <div className="w-full pt-8">
          <AuthCard />
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthCard: React.FC = () => {
  const { user, error, isLoading } = useUser();

  if (isLoading) {
    return <Loading />;
  }

  if (error) {
    return <WarningMessage message={error.message} />;
  }

  if (!user) {
    return (
      <div className="flex flex-col items-center gap-2">
        <Link
          href={"/api/auth/login"}
          className={
            "mx-1 my-2 rounded bg-indigo-700 px-4 py-2 text-sm text-white transition duration-150 ease-in-out hover:bg-indigo-600"
          }
        >
          Sign In
        </Link>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center gap-2">
      <span>Welcome {user.name} from auth0</span>
      <Link
        href={"/api/auth/logout"}
        className={
          "mx-1 my-2 rounded bg-indigo-700 px-4 py-2 text-sm text-white transition duration-150 ease-in-out hover:bg-indigo-600"
        }
      >
        Sign Out
      </Link>
    </div>
  );
};

const SecretTrpc: React.FC = () => {
  const { data, error, isLoading } = trpc.example.secretMessage.useQuery(
    undefined,
    {
      retry: 0,
    }
  );

  if (isLoading) {
    return <Loading />;
  }

  if (error) {
    return <WarningMessage message={error.message} />;
  }

  return (
    <div className="block text-center font-sans text-xl font-semibold leading-snug tracking-normal text-inherit antialiased">
      {data?.message}
    </div>
  );
};
